input KeyValueInput {
  name: String!
  value: String!
}

type KeyValue {
  name: String!
  value: String!
}

type Group {
  # The universal identifier (UUID) of the group.
  id: ID!
  # The name of the group. The group name is limited to a maximum of 182 alphanumeric characters.
  name: String
  # The template that the group is using
  template: Template
  # The number of compute instances to run and maintain a specified number (the "desired count") of instances.
  capacity: Int
  # When this group was created. ISO8601 date format.
  created: String
  # When this group's details were last updated. ISO8601 date format.
  updated: String
}

type Template {
  # The universal identifier (UUID) of the template.
  id: ID!
  # The name of the template.
  name: String
  # The unique identifier (UUID) of the package to use when launching compute instances.
  package: String
  # The unique identifier (UUID) of the image to use when launching compute instances.
  image: ID
  # Whether to enable or disable the firewall on the instances launched. Default is false.
  enableFirewall: Boolean
  # A list of unique network identifiers to attach to the compute instances launched.
  networks: [String]
  # Arbitrary data to be copied to the instances on boot. This will not be executed.
  userdata: String
  # A mapping of metadata (a key-value pairs) to apply to the instances launched.
  metadata: [KeyValue]
  # A mapping of tags (a key-value pairs) to apply to the instances launched.
  tags: [KeyValue]
  # When this template was created. ISO8601 date format.
  created: String
}

type Mutation {
  # Create a new group.
  createGroup(
    # Name of the new group.
    name: String!
    # The template to use with this group.
    template: ID!
    # The number of compute instances to run and maintain a specified number (the "desired count") of instances.
    capacity: Int!
  ): Group

  # Update an existing group
  updateGroup(
    # UUID of group to update.
    id: ID!
    # Updated name of group.
    name: String!
    # The template to use, which itself will not be updated (templates are immutable).
    template: ID!
    # Updated number of compute instances to run and maintain.
    capacity: Int!
  ): Group

  # Delete a group.
  deleteGroup(id: ID!): Group

  # Create a new template.
  createTemplate(
    # The name of the template.
    name: String!
    # The unique identifier (UUID) of the package to use when launching compute instances.
    package: String!
    # The unique identifier (UUID) of the image to use when launching compute instances.
    image: ID!
    # Whether to enable or disable the firewall on the instances launched.
    enableFirewall: Boolean
    # A list of unique network identifiers to attach to the compute instances launched.
    networks: [String]
    # Arbitrary data to be copied to the instances on boot. This will not be executed.
    userdata: String
    # A mapping of metadata (a key-value pairs) to apply to the instances launched.
    metadata: [KeyValueInput]
    # A mapping of tags (a key-value pairs) to apply to the instances launched.
    tags: [KeyValueInput]
  ): Template

  # Delete an existing template.
  deleteTemplate(id: ID!): Template
}

type Query {
  # List all of the existing groups
  groups: [Group]

  # Retrieve a specific group
  group(
    # The universal identifier (UUID) of the group.
    id: ID!
  ): Group

  # List all of the existing templates
  templates: [Template]

  # Retrieve a specific template
  template(
    # The universal identifier (UUID) of the template.
    id: ID!
  ): Template
}
